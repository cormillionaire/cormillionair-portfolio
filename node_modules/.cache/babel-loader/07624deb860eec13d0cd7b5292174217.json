{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cornelia\\\\projects\\\\homework\\\\cormillionair-portfolio\\\\src\\\\components\\\\ContactForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport '../styles/Form.css'; // Here we import a helper function that will check if the email is valid\n\nimport { validateEmail } from './utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ContactForm() {\n  _s();\n\n  // Create state variables for the fields in the form\n  // We are also setting their initial values to an empty string\n  const [email, setEmail] = useState('');\n  const [userName, setUserName] = useState('');\n  const [message, setMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleInputChange = e => {\n    // Getting the value and name of the input which triggered the change\n    const {\n      target\n    } = e;\n    const inputType = target.name;\n    const inputValue = target.value; // Based on the input type, we set the state of either name, email, and message\n\n    if (inputType === 'email') {\n      setEmail(inputValue);\n    } else if (inputType === 'userName') {\n      setUserName(inputValue);\n    } else {\n      setMessage(inputValue);\n    }\n  };\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n\n    if (!validateEmail(email)) {\n      setErrorMessage('Email is invalid');\n      return;\n    }\n\n    if (!userName) {\n      setErrorMessage('Name is required');\n      return;\n    }\n\n    if (!message) {\n      setErrorMessage(`Message is required tro submit`);\n      return;\n    }\n\n    setUserName('');\n    setMessage('');\n    setEmail('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: userName,\n      name: \"name\",\n      onChange: handleInputChange,\n      type: \"text\",\n      placeholder: \"name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: email,\n        name: \"email\",\n        onChange: handleInputChange,\n        type: \"email\",\n        placeholder: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: message,\n        name: \"message\",\n        onChange: handleInputChange,\n        type: \"message\",\n        placeholder: \"Write your message here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleFormSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ContactForm, \"LFeMB0DwocWvGtechIW9mQ8RlZw=\");\n\n_c = ContactForm;\nexport default ContactForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"sources":["C:/Users/Cornelia/projects/homework/cormillionair-portfolio/src/components/ContactForm.js"],"names":["React","useState","validateEmail","ContactForm","email","setEmail","userName","setUserName","message","setMessage","errorMessage","setErrorMessage","handleInputChange","e","target","inputType","name","inputValue","value","handleFormSubmit","preventDefault"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport '../styles/Form.css';\r\n\r\n// Here we import a helper function that will check if the email is valid\r\nimport { validateEmail } from './utils/helpers';\r\n\r\nfunction ContactForm() {\r\n  // Create state variables for the fields in the form\r\n  // We are also setting their initial values to an empty string\r\n  const [email, setEmail] = useState('');\r\n  const [userName, setUserName] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    // Getting the value and name of the input which triggered the change\r\n    const { target } = e;\r\n    const inputType = target.name;\r\n    const inputValue = target.value;\r\n\r\n    // Based on the input type, we set the state of either name, email, and message\r\n    if (inputType === 'email') {\r\n      setEmail(inputValue);\r\n    } else if (inputType === 'userName') {\r\n      setUserName(inputValue);\r\n    } else {\r\n      setMessage(inputValue);\r\n    }\r\n  };\r\n\r\n  const handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!validateEmail(email)) {\r\n      setErrorMessage('Email is invalid');\r\n      return;\r\n    }\r\n    if (!userName) {\r\n      setErrorMessage('Name is required');\r\n      return;\r\n    }\r\n    if (!message) {\r\n      setErrorMessage(\r\n        `Message is required tro submit`\r\n      );\r\n      return;\r\n    }\r\n    setUserName('');\r\n    setMessage('');\r\n    setEmail('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        value={userName}\r\n        name=\"name\"\r\n        onChange={handleInputChange}\r\n        type=\"text\"\r\n        placeholder=\"name\"\r\n      />\r\n      <form className=\"form\">\r\n        <input\r\n          value={email}\r\n          name=\"email\"\r\n          onChange={handleInputChange}\r\n          type=\"email\"\r\n          placeholder=\"email\"\r\n        />\r\n        <input\r\n          value={message}\r\n          name=\"message\"\r\n          onChange={handleInputChange}\r\n          type=\"message\"\r\n          placeholder=\"Write your message here\"\r\n        />\r\n        <button type=\"button\" onClick={handleFormSubmit}>Submit</button>\r\n      </form>\r\n      {errorMessage && (\r\n        <div>\r\n          <p className=\"error-text\">{errorMessage}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactForm;"]},"metadata":{},"sourceType":"module"}