{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\Cornelia\\\\projects\\\\homework\\\\cormillionair-portfolio\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import React,{useState}from'react';import'../styles/Form.css';// Here we import a helper function that will check if the email is valid\nimport{validateEmail}from'./utils/helpers';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function ContactForm(){// Create state variables for the fields in the form\n// We are also setting their initial values to an empty string\nvar _useState=useState(''),_useState2=_slicedToArray(_useState,2),email=_useState2[0],setEmail=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),name=_useState4[0],setUserName=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),message=_useState6[0],setMessage=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),errorMessage=_useState8[0],setErrorMessage=_useState8[1];var handleInputChange=function handleInputChange(e){// Getting the value and name of the input which triggered the change\nvar target=e.target;var inputType=target.name;var inputValue=target.value;// Based on the input type, we set the state of either name, email, and message\nif(inputType==='email'){setEmail(inputValue);}else if(inputType==='name'){setUserName(inputValue);}else{setMessage(inputValue);}};var handleFormSubmit=function handleFormSubmit(e){e.preventDefault();if(!name){setErrorMessage('Name is required');return;}if(!validateEmail(email)){setErrorMessage('Email is invalid');return;}if(!message){setErrorMessage(\"Message is required to submit\");return;}setUserName('');setMessage('');setEmail('');};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"form\",{className:\"form-floating\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-floating mb-3 \",children:[/*#__PURE__*/_jsx(\"input\",{value:name,name:\"name\",onChange:handleInputChange,type:\"text\",placeholder:\"name\",className:\"form-control\",id:\"nameInput\"}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"nameInput\",children:\"name\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-floating mb-3 \",children:[/*#__PURE__*/_jsx(\"input\",{value:email,name:\"email\",onChange:handleInputChange,type:\"email\",placeholder:\"email\",className:\"form-control\",id:\"emailInput\"}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"emailInput\",children:\"email address\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-floating\",children:[/*#__PURE__*/_jsx(\"textarea\",{value:message,name:\"message\",onChange:handleInputChange,type:\"message\",placeholder:\"Write your message here\",className:\"form-control textArea\",id:\"messageInput\"}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"messageInput\",children:\"message\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"m-3\",children:/*#__PURE__*/_jsx(\"button\",{className:\"btn\",type:\"button\",onClick:handleFormSubmit,children:\"Submit\"})})]}),errorMessage&&/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"p\",{className:\"error-text\",children:errorMessage})})]});}export default ContactForm;","map":{"version":3,"sources":["C:/Users/Cornelia/projects/homework/cormillionair-portfolio/src/components/ContactForm.js"],"names":["React","useState","validateEmail","ContactForm","email","setEmail","name","setUserName","message","setMessage","errorMessage","setErrorMessage","handleInputChange","e","target","inputType","inputValue","value","handleFormSubmit","preventDefault"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport '../styles/Form.css';\r\n\r\n// Here we import a helper function that will check if the email is valid\r\nimport { validateEmail } from './utils/helpers';\r\n\r\nfunction ContactForm() {\r\n  // Create state variables for the fields in the form\r\n  // We are also setting their initial values to an empty string\r\n  const [email, setEmail] = useState('');\r\n  const [name, setUserName] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    // Getting the value and name of the input which triggered the change\r\n    const { target } = e;\r\n    const inputType = target.name;\r\n    const inputValue = target.value;\r\n\r\n    // Based on the input type, we set the state of either name, email, and message\r\n    if (inputType === 'email') {\r\n      setEmail(inputValue);\r\n    } else if (inputType === 'name') {\r\n      setUserName(inputValue);\r\n    } else {\r\n      setMessage(inputValue);\r\n    }\r\n  };\r\n\r\n  const handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!name) {\r\n      setErrorMessage('Name is required');\r\n      return;\r\n    }\r\n    if (!validateEmail(email)) {\r\n      setErrorMessage('Email is invalid');\r\n      return;\r\n    }\r\n    if (!message) {\r\n      setErrorMessage(\r\n        `Message is required to submit`\r\n      );\r\n      return;\r\n    }\r\n    setUserName('');\r\n    setMessage('');\r\n    setEmail('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form className=\"form-floating\">\r\n        <div className=\"form-floating mb-3 \">\r\n          <input\r\n            value={name}\r\n            name=\"name\"\r\n            onChange={handleInputChange}\r\n            type=\"text\"\r\n            placeholder=\"name\"\r\n            className=\"form-control\"\r\n            id=\"nameInput\"\r\n          />\r\n          <label htmlFor=\"nameInput\">name</label>\r\n        </div>\r\n        <div className=\"form-floating mb-3 \">\r\n          <input\r\n            value={email}\r\n            name=\"email\"\r\n            onChange={handleInputChange}\r\n            type=\"email\"\r\n            placeholder=\"email\"\r\n            className=\"form-control\"\r\n            id=\"emailInput\"\r\n          />\r\n          <label htmlFor=\"emailInput\" >email address</label>\r\n        </div>\r\n        <div className=\"form-floating\">\r\n          <textarea\r\n            value={message}\r\n            name=\"message\"\r\n            onChange={handleInputChange}\r\n            type=\"message\"\r\n            placeholder=\"Write your message here\"\r\n            className=\"form-control textArea\"\r\n            id=\"messageInput\"\r\n          />\r\n          <label htmlFor=\"messageInput\">message</label>\r\n        </div>\r\n        <div className=\"m-3\">\r\n          <button className=\"btn\" type=\"button\" onClick={handleFormSubmit}>Submit</button>\r\n        </div>\r\n      </form>\r\n      {\r\n        errorMessage && (\r\n          <div>\r\n            <p className=\"error-text\">{errorMessage}</p>\r\n          </div>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactForm;"]},"metadata":{},"sourceType":"module"}