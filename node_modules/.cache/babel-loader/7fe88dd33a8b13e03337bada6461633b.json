{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cornelia\\\\projects\\\\homework\\\\cormillionair-portfolio\\\\src\\\\components\\\\ContactForm.js\";\nimport React, { useState, setState, Component } from 'react';\nimport '../styles/Form.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ContactForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.isValidEmail = email => {\n      return /^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/.test(email);\n    };\n\n    this.state = {\n      name: '',\n      nameError: false,\n      contact: '',\n      email: '',\n      emailError: false,\n      message: '',\n      messageError: false,\n      formValid: false\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n  }\n\n  handleBlur(e) {\n    const name = e.target.name;\n    const value = e.target.value;\n    this.setState({\n      [name]: value\n    });\n\n    if (value.length <= 0 && name == 'name') {\n      this.setState({\n        nameError: true\n      });\n    } else {\n      this.setState({\n        nameError: false\n      });\n    }\n\n    if (value.length <= 0 || name == 'email') {\n      this.setState({\n        emailError: true\n      });\n    } else {\n      this.setState({\n        emailError: false\n      });\n\n      if (this.isValidEmail(value)) {\n        this.setState({\n          emailError: false\n        });\n      } else {\n        this.setState({\n          emailError: true\n        });\n      }\n    }\n  }\n\n  validation() {\n    'use strict'; // Fetch all the forms we want to apply custom Bootstrap validation styles to\n\n    var forms = document.querySelectorAll('.needs-validation'); // Loop over them and prevent submission\n\n    Array.prototype.slice.call(forms).forEach(function (form) {\n      form.addEventListener('submit', function (event) {\n        if (!form.checkValidity()) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        form.classList.add('was-validated');\n      }, false);\n    });\n  }\n\n  handleInputChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  } // Getting the value and name of the input which triggered the change\n\n\n  handleFormSubmit(e) {\n    const {\n      name,\n      email,\n      message,\n      nameError,\n      emailError,\n      messageError\n    } = this.state;\n    this.setState({\n      nameError: name ? false : true\n    });\n    this.setState({\n      messageError: message ? false : true\n    });\n    this.setState({\n      emailError: email ? false : true\n    });\n\n    if (name && email && message && !nameError && !emailError && !messageError) {\n      this.setState({\n        formValid: true\n      });\n    } else {\n      this.setState({\n        formValid: false\n      });\n    }\n\n    e.preventDefault();\n  }\n\n  render() {\n    const {\n      name,\n      email,\n      message,\n      nameError,\n      emailError,\n      messageError,\n      formValid\n    } = this.state;\n\n    if (!formValid) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"contact\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"form-floating needs-validation \",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-floating mb-3 has-validation\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              name: \"name\",\n              type: \"text\",\n              className: \"form-control\",\n              id: \"nameInput\",\n              placeholder: \"name\",\n              value: name,\n              onChange: this.handleInputChange,\n              onBlur: this.handleBlur,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nameInput\",\n              children: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 15\n            }, this), nameError ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"alert alert-danger\",\n              children: \"Name is a required field.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 19\n            }, this) : '']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-floating mb-3 has-validation\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              name: \"email\",\n              type: \"email\",\n              className: \"form-control\",\n              id: \"emailInput\",\n              placeholder: \"name@example.com\",\n              value: email,\n              onChange: this.handleInputChange,\n              onBlur: this.handleBlur,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"emailInput\",\n              children: \"email address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this), emailError ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"invalid-feedback\",\n              children: \"Email is a required field and must be valid.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 19\n            }, this) : '']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-floating has-validation textarea\",\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              name: \"message\",\n              className: \"form-control\",\n              id: \"messageInput\",\n              placeholder: \"Leave a comment here\",\n              value: message,\n              onChange: this.handleInputChange,\n              onBlur: this.handleBlur,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"messageInput\",\n              children: \"message\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this), messageError ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"invalid-feedback\",\n              children: \"Message is a required field.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 19\n            }, this) : '']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"m-3\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn\",\n              type: \"submit\",\n              onClick: this.handleFormSubmit,\n              children: \"submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this);\n    }\n\n    ;\n  }\n\n}\n\n;\nexport default ContactForm;","map":{"version":3,"sources":["C:/Users/Cornelia/projects/homework/cormillionair-portfolio/src/components/ContactForm.js"],"names":["React","useState","setState","Component","ContactForm","constructor","props","isValidEmail","email","test","state","name","nameError","contact","emailError","message","messageError","formValid","handleInputChange","bind","handleFormSubmit","handleBlur","e","target","value","length","validation","forms","document","querySelectorAll","Array","prototype","slice","call","forEach","form","addEventListener","event","checkValidity","preventDefault","stopPropagation","classList","add","render"],"mappings":"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","sourcesContent":["import React, { useState, setState, Component } from 'react';\r\nimport '../styles/Form.css';\r\n\r\nclass ContactForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: '',\r\n      nameError: false,\r\n      contact: '',\r\n      email: '',\r\n      emailError: false,\r\n      message: '',\r\n      messageError: false,\r\n      formValid: false\r\n    };\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\r\n    this.handleBlur = this.handleBlur.bind(this);\r\n  };\r\n  isValidEmail = (email) => {\r\n    return /^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/.test(email);\r\n  }\r\n\r\n  handleBlur(e) {\r\n    const name = e.target.name;\r\n    const value = e.target.value;\r\n    this.setState({ [name]: value });\r\n    if (value.length <= 0 && (name == 'name')) {\r\n      this.setState({ nameError: true });\r\n    } else {\r\n      this.setState({ nameError: false });\r\n    }\r\n    if (value.length <= 0 || (name == 'email')) {\r\n      this.setState({ emailError: true });\r\n    } else {\r\n      this.setState({ emailError: false });\r\n      if (this.isValidEmail(value)) {\r\n        this.setState({ emailError: false });\r\n      } else {\r\n        this.setState({ emailError: true });\r\n      }\r\n    }\r\n  }\r\n  validation () {\r\n    'use strict'\r\n  \r\n    // Fetch all the forms we want to apply custom Bootstrap validation styles to\r\n    var forms = document.querySelectorAll('.needs-validation')\r\n  \r\n    // Loop over them and prevent submission\r\n    Array.prototype.slice.call(forms)\r\n      .forEach(function (form) {\r\n        form.addEventListener('submit', function (event) {\r\n          if (!form.checkValidity()) {\r\n            event.preventDefault()\r\n            event.stopPropagation()\r\n          }\r\n  \r\n          form.classList.add('was-validated')\r\n        }, false)\r\n      })\r\n  }\r\n\r\n  handleInputChange(e){\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n  // Getting the value and name of the input which triggered the change\r\n  handleFormSubmit(e) {\r\n    const { name, email, message, nameError, emailError, messageError } = this.state;\r\n\r\n    this.setState({ nameError: name ? false : true });\r\n    this.setState({ messageError: message ? false : true });\r\n    this.setState({ emailError: email ? false : true });\r\n\r\n    if (name && email && message && !nameError && !emailError && !messageError) {\r\n      this.setState({ formValid: true });\r\n    } else {\r\n      this.setState({ formValid: false });\r\n    }\r\n    e.preventDefault();\r\n  }\r\n  render () {\r\n    const { name, email, message, nameError, emailError, messageError, formValid } = this.state;\r\n    if (!formValid) {\r\n      return (\r\n        <div>\r\n          <h1>contact</h1>\r\n          <form className=\"form-floating needs-validation \">\r\n            <div className=\"form-floating mb-3 has-validation\">\r\n              <input name=\"name\" type=\"text\" className=\"form-control\" id=\"nameInput\" placeholder=\"name\" value={name} onChange={this.handleInputChange} onBlur={this.handleBlur} required></input>\r\n              <label htmlFor=\"nameInput\">name</label>\r\n              {nameError\r\n                ? <div className=\"alert alert-danger\">Name is a required field.</div>\r\n                : ''\r\n              }\r\n            </div>\r\n            <div className=\"form-floating mb-3 has-validation\">\r\n              <input name=\"email\" type=\"email\" className=\"form-control\" id=\"emailInput\" placeholder=\"name@example.com\" value={email} onChange={this.handleInputChange} onBlur={this.handleBlur} required></input>\r\n              <label htmlFor=\"emailInput\" >email address</label>\r\n              {emailError\r\n                ? <div className=\"invalid-feedback\">Email is a required field and must be valid.</div>\r\n                : ''\r\n              }\r\n            </div>\r\n            <div className=\"form-floating has-validation textarea\">\r\n              <textarea name=\"message\" className=\"form-control\" id=\"messageInput\" placeholder=\"Leave a comment here\" value={message} onChange={this.handleInputChange} onBlur={this.handleBlur} required></textarea>\r\n              <label htmlFor=\"messageInput\">message</label>\r\n              {messageError\r\n                ? <div className=\"invalid-feedback\">Message is a required field.</div>\r\n                : ''\r\n              }\r\n            </div>\r\n            <div className=\"m-3\">\r\n              <button className=\"btn\" type=\"submit\" onClick={this.handleFormSubmit} >submit</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      );\r\n    };\r\n  };\r\n};\r\n\r\nexport default ContactForm;"]},"metadata":{},"sourceType":"module"}